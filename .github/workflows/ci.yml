name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # --- Node.js Setup ---
      - name: Set up Node.js & npm auth
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org/"
          scope: "@ibrahimt2miraj"
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install Node dependencies
        run: npm install

      # ─── Verify NPM publish rights ────────────────────────────────────
      - name: Verify NPM publish rights (dry run)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Configure auth for the dry run
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
          echo "@ibrahimt2miraj:registry=https://registry.npmjs.org/" >> ~/.npmrc

          # Attempt a dry run publish
          npm publish --dry-run --access public

          # Cleanup
          rm ~/.npmrc

      # --- Python Setup & Flask ---
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask requests pytest pytest-cov pyyaml
          pip install -r requirements.txt

        # --- OpenAPI Breaking Check ---
      - name: Install oasdiff
        run: |
          curl -sSL https://raw.githubusercontent.com/Tufin/oasdiff/main/install.sh | sh

      - name: Fetch origin/main
        run: git fetch origin main

      - name: Compare OpenAPI specs for breaking changes
        id: breaking-check
        run: |
          set -e
          git fetch origin main
          git show origin/main:spec/server.yaml > old.yaml
          cp spec/server.yaml new.yaml

          if oasdiff breaking old.yaml new.yaml -o ERR -f markdown > openapi-breaking-changes.md; then
            echo "has_breaking=false" >> $GITHUB_OUTPUT
          else
            echo "has_breaking=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug OpenAPI versions & content
        run: |
          echo "OLD VERSION:"
          yq '.info.version' old.yaml
          echo "---"
          cat old.yaml
          echo "NEW VERSION:"
          yq '.info.version' new.yaml
          echo "---"
          cat new.yaml

      - name: Validate version bump if breaking changes
        if: steps.breaking-check.outputs.has_breaking == 'true'
        run: |
          OLD_VERSION=$(yq '.info.version' old.yaml)
          NEW_VERSION=$(yq '.info.version' new.yaml)
          OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
          NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)

          echo "🚨 Breaking changes detected!"
          echo "Old version: $OLD_VERSION"
          echo "New version: $NEW_VERSION"

          if [ "$NEW_MAJOR" -le "$OLD_MAJOR" ]; then
            echo "❌ Major version must be bumped for breaking changes!"
            cat openapi-breaking-changes.md
            exit 1
          else
            echo "✅ Breaking changes allowed — major version bumped."
          fi

      # --- Version Sync ---
      - name: Check Node Client/OpenAPI/Python client/server versions match
        run: node scripts/check_versions_match.js

      - name: Install openapi-python-client
        run: pip3 install openapi-python-client==0.25.0

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

        # --- Reset generated clients to match Git state ---
      - name: Reset Node client directory to match Git state
        run: git checkout -- node_client

      - name: Reset Python client directory to match Git state
        run: git checkout -- python_client

      # --- Generate clients ---
      - name: Generate Node client
        run: npm run generate-node-client

      - name: Generate Python client
        run: npm run generate-python-client

      # --- Check if generated Node client is up-to-date ---
      - name: Check if Node client is up-to-date
        run: |
          echo "--- Git status for node_client ---"
          git status node_client
          echo "--- Git diff for node_client ---"
          git diff node_client
          if [[ -n "$(git ls-files --others --exclude-standard node_client)" ]]; then
            echo "❌ Untracked files detected in node_client. Client is out of date."
            exit 1
          fi
          if ! git diff --quiet node_client; then
            echo "❌ Changes detected in node_client. Client is out of date."
            exit 1
          fi

      # --- Check if generated Python client is up-to-date ---
      - name: Check if Python client is up-to-date
        run: |
          echo "--- Git status for python_client ---"
          git status python_client
          echo "--- Git diff for python_client ---"
          git diff python_client
          if [[ -n "$(git ls-files --others --exclude-standard python_client)" ]]; then
            echo "❌ Untracked files detected in python_client. Client is out of date."
            exit 1
          fi
          if ! git diff --quiet python_client; then
            echo "❌ Changes detected in python_client. Client is out of date."
            exit 1
          fi

      # --- Tests ---

      - name: Start Flask Server
        working-directory: ./server
        run: |
          nohup python server.py > ../server.log 2>&1 &
          for i in {1..10}; do
            if curl -s http://localhost:5000/todos > /dev/null; then
              echo "Flask server is up!"
              break
            else
              echo "Waiting for Flask server to start..."
              sleep 3
            fi
          done

      - name: Run Node tests
        run: npm run node-test

      - name: Run typecheck
        run: npm run build:dev

      - name: Run Python tests with coverage
        run:
          npm run python-test

          # ─── Enforce manual semver bump (only on PR) ───────────────────
      - name: Ensure version bumped at least patch
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # Get raw remote vs local versions
          REMOTE=$(git show origin/main:package.json | yq -r '.version')
          LOCAL=$(yq -r '.version' package.json)
          echo "Remote version: $REMOTE"
          echo "Local  version: $LOCAL"

          # Split into semver fields
          IFS=. read -r rM r_m r_p <<< "$REMOTE"
          IFS=. read -r lM l_m l_p <<< "$LOCAL"

          # Compare semver: local > remote?
          if (( lM > rM )) \
             || (( lM == rM && l_m > r_m )) \
             || (( lM == rM && l_m == r_m && l_p > r_p )); then
            echo "✅ Version bumped (at least patch)."
          else
            echo "❌ Version must be bumped (patch, minor, or major)."
            exit 1
          fi

      # --- OpenAPI Changelog ---
      - name: Generate OpenAPI changelog
        run: |
          oasdiff changelog old.yaml new.yaml -f markdown > openapi-changelog.md || true

      - name: Append OpenAPI changelog to changelog.md
        run: |
          echo "## 🔄 Changelog ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))" >> changelog.md
          cat openapi-changelog.md >> changelog.md
          echo ""

  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js & npm auth
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org/"
          scope: "@ibrahimt2miraj"
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install Node dependencies
        run: npm install

      # ─── Configure Git identity ────────────────────────────────────────
      - name: Set Git user for version bump
        run: |
          git config user.name  "ibrahimt2"
          git config user.email "zerobottles@outlook.com"

      - name: NPM publish 
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |

          # Attempt a dry run publish
          npm publish --access public --verbose

          # Cleanup
          rm ~/.npmrc

      # ─── PyPI publish ────────────────────────────────────────────────
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build Python package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*