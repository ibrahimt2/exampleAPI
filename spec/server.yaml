openapi: 3.0.0
info:
  title: Todo API
  description: >-
    A simple Todo API that demonstrates endpoints for managing todos.

    This spec includes accurate summaries and descriptions for client generation.
  version: 1.0.0
tags:
  - name: TodoService
paths:
  /todos:
    get:
      summary: Retrieve a list of todos
      description: Returns all todos currently stored in the system.
      operationId: getTodos
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTodosResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      tags:
        - TodoService
    post:
      summary: Create a new todo
      description: Creates and returns a new todo item.
      operationId: createTodo
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTodo"
        required: true
      tags:
        - TodoService
  "/todos/{todoId}":
    get:
      summary: Retrieve a specific todo by ID
      description: Fetches a todo with the specified ID. Returns 404 if not found.
      operationId: getTodoById
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: todoId
          description: ID of the todo to fetch
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - TodoService
    put:
      summary: Update a specific todo by ID
      description: Modifies an existing todo entry. Returns 404 if the ID is not found.
      operationId: updateTodo
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: todoId
          description: ID of the todo to update
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
        required: true
      tags:
        - TodoService
servers:
  - url: /
components:
  schemas:
    GetTodosResponse:
      type: object
      properties:
        todos:
          type: array
          items:
            $ref: "#/components/schemas/Todo"
          description: List of all todos
      title: GetTodosResponse
    NewTodo:
      type: object
      properties:
        title:
          type: string
          example: Buy groceries
          description: Title of the new todo
        completed:
          type: boolean
          example: false
          description: Initial completion state of the new todo
      title: NewTodo
      required:
        - "true"
    Todo:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
          description: Unique identifier for the todo
        title:
          type: string
          example: Buy groceries
          description: Title of the todo
        completed:
          type: boolean
          example: false
          description: Whether the todo is marked as completed
      title: Todo
      required:
        - "true"
    protobufAny:
      type: object
      properties:
        "@type":
          type: string
      additionalProperties: {}
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
